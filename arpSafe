#!/usr/bin/env python3

import netifaces
import time
import os
import sys
import scapy
import queue
import threading
import datetime
import signal

from scapy.layers.l2 import ARP, Ether
from scapy.sendrecv import srp, AsyncSniffer

print_stmt = queue.Queue()
log_stmt = queue.Queue()
stop_event = threading.Event()


def output():
    while not stop_event.is_set():
        try:
            msg = print_stmt.get(timeout=1)
            if msg == "Exit":
                break
            print(msg)
            sys.stdout.flush()
        except queue.Empty:
            continue


def log():
    with open("arp_safe_log.txt", "a") as f:
        f.write(f"-------- ArpSafe started at {datetime.datetime.now()}\n")
        while not stop_event.is_set():
            try:
                msg = log_stmt.get(timeout=1)
                if msg == "Exit":
                    break
                f.write(msg + "\n")
                f.flush()
            except queue.Empty:
                continue
        f.write("\n")


class ArpSafe:
    def __init__(self):
        self.interface = self.get_active_interface()
        self.gateway_ip = self.get_router_ip()
        self.gateway_mac = self.get_mac(self.gateway_ip)
        self.attacker_ip = None
        self.attacker_mac = None
        self.sniffer = None
        self.blocked_macs = set()

    def get_active_interface(self):
        gateways = netifaces.gateways()
        default_gateway = gateways.get('default', {})
        if netifaces.AF_INET in default_gateway:
            return default_gateway[netifaces.AF_INET][1]
        return None

    def get_router_ip(self):
        gateways = netifaces.gateways()
        default_gateway = gateways.get('default', {})
        if netifaces.AF_INET in default_gateway:
            return default_gateway[netifaces.AF_INET][0]
        return None

    def get_mac(self, ip):
        request = ARP(pdst=ip)
        broadcast = Ether(dst="ff:ff:ff:ff:ff:ff")
        packet = broadcast / request
        ans, _ = srp(packet, iface=self.interface, timeout=2, verbose=False)
        if ans:
            return ans[0][1].hwsrc
        return None

    def set_static_entry(self):
        os.system(f"sudo arp -s {self.gateway_ip} {self.gateway_mac}")
        print_stmt.put("Static ARP entry for router is set.")
        log_stmt.put("Static ARP entry for router is set.")

    def show_dropped_pkt_count(self):
        os.system(f"sudo arptables -L -v -n --line-numbers")

    def block_attacker_by_mac(self, mac):
        if mac in self.blocked_macs:
            print_stmt.put(f"MAC {mac} already blocked, skipping.")
            log_stmt.put(f"MAC {mac} already in blocked_macs list.")
            return

        os.system(f"sudo arptables -A INPUT --src-mac {mac} -j DROP")
    
        print_stmt.put(f"Blocked attacker MAC: {mac}")
        log_stmt.put(f"Blocked attacker MAC: {mac}")
        self.blocked_macs.add(mac)

    def handle_arp_packet(self, pkt):
        if pkt.haslayer(ARP) and pkt[ARP].op == 2:
            ip_ = pkt[ARP].psrc
            mac_ = pkt[ARP].hwsrc
            if self.gateway_ip == ip_ and (self.gateway_mac and mac_ != self.gateway_mac):
                print_stmt.put(f"ARP Spoofing detected! Attacker IP: {ip_}, MAC: {mac_}")
                log_stmt.put(f"ARP Spoofing detected! Attacker IP: {ip_}, MAC: {mac_}")
                self.attacker_ip = ip_
                self.attacker_mac = mac_
                self.block_attacker_by_mac(mac_)
                self.show_dropped_pkt_count()

    def protect_network(self):
        print_stmt.put("ARP Protection Active! Monitoring for attacks...")
        print_stmt.put("Setting static ARP entry for router...")
        self.set_static_entry()

        self.sniffer = AsyncSniffer(filter="arp", prn=self.handle_arp_packet,
                                    store=False, iface=self.interface)
        self.sniffer.start()

    def stop_protection(self):
        if self.sniffer:
            self.sniffer.stop()
        os.system(f"sudo arptables -F")
        os.system(f"sudo arp -d {self.gateway_ip}")
        print_stmt.put("Restored original ARP settings.")
        log_stmt.put("Restored original ARP settings.")


def signal_handler(sig, frame):
    stop_event.set()
    arp_protector.stop_protection()
    print_stmt.put("Exit")
    log_stmt.put("Exit")
    time.sleep(0.5)
    sys.exit(0)


if __name__ == "__main__":
    signal.signal(signal.SIGINT, signal_handler)  # Handle Ctrl+C

    threading.Thread(target=output, daemon=True).start()
    threading.Thread(target=log, daemon=True).start()

    arp_protector = ArpSafe()
    arp_protector.protect_network()

    while not stop_event.is_set():
        time.sleep(1)


